language: c
sudo: false

git:
    submodules: false # don't recursively clone submodules

# NOTE: build multiple executables by making $EXE a matrix var
env:
    global:
        - EXE=hello # name of the executable to build (as it appears in the cabal stanza)

matrix:
    include:
        - os: linux
          # NOTE: purescript prefers trusty for performance reasons?
          dist: trusty
          addons:
              apt:
                  packages:
                      - ghc-8.4.4
                      - cabal-install-2.4
                  sources:
                      # https://launchpad.net/~hvr/+archive/ubuntu/ghc
                      - hvr-ghc

        - os: osx
          # Install stuff with Homebrew (see before_install)

        - os: windows
          # Install stuff with Chocolatey (see before_install)

# Make sure ghc and cabal are installed and on $PATH
before_install:
    - |
        if [ "$TRAVIS_OS_NAME" = linux ]
        then
            export PATH=$PATH:"/opt/ghc/bin";
        fi
    - |
        if [ "$TRAVIS_OS_NAME" = osx ]
        then
          brew update;
          # TODO: pin versions here
          brew install ghc;
          brew install cabal-install;
        fi
    - |
        if [ "$TRAVIS_OS_NAME" = windows ]
        then
            # NOTE: can't have secure (i.e. set in the Travis UI) env vars
            # otherwise this will hang
            # https://travis-ci.community/t/choco-install-hangs-forever/307
            choco install ghc --version 8.4.4 -y;
            choco install cabal --version 2.4.1.0 -y;

            # NOTE: Chocolatey $PATH changes don't take effect.
            # Need to modify the $PATH manually.
            export PATH=$PATH:"C:\ProgramData\chocolatey\lib\ghc\tools\ghc-8.4.4\bin";
        fi

# Update package list and install project dependencies (cached)
install:
    # Print version numbers for debuggin'
    - ghc --version
    - cabal --version

    - travis_retry cabal new-update --verbose
    - cabal new-build --disable-tests --disable-benchmarks --dependencies-only -j2 all

# Build and test the thing
script:
    - cabal new-build --enable-tests --disable-benchmarks all
    #                                  ^^^^^^^ enable if you want
    - cabal new-test all
    - cabal check

# Deploy github release (optional)
before_deploy:
    - cabal new-clean
    - travis_retry cabal new-update --verbose
    - cabal new-build --disable-tests --disable-benchmarks --enable-optimization=2 $EXE

    # Get path of the built executable
    - |
        if [ "$TRAVIS_OS_NAME" = windows ]
        then
            EXE_NAME=$EXE.exe;
        else
            EXE_NAME=$EXE;
        fi
    - EXE_PATH=$(find dist-newstyle/build/ -type f -name $EXE_NAME) # NOTE: assuming this finds only one file!

    # Build the tarball
    - tar --create --file $TRAVIS_OS_NAME.tar --files-from /dev/null
    - tar --append --file $TRAVIS_OS_NAME.tar -C $(dirname $EXE_PATH) $EXE_NAME
    - tar --append --file $TRAVIS_OS_NAME.tar LICENSE

    # Gzip the tarball
    - gzip --verbose $TRAVIS_OS_NAME.tar

    # Create the checksum
    - |
        if [ "$TRAVIS_OS_NAME" = windows ];
        then
            openssl dgst -sha1 $TRAVIS_OS_NAME.tar.gz | tee $TRAVIS_OS_NAME.sha;
        else
            shasum $TRAVIS_OS_NAME.tar.gz | tee $TRAVIS_OS_NAME.sha;
        fi

deploy:
    provider: releases
    api_key:
        # $ travis encrypt <github oauth token>
        secure: "TODO"
    file:
        - $TRAVIS_OS_NAME.tar.gz
        - $TRAVIS_OS_NAME.sha
    skip_cleanup: true
    on:
        tags: true

notifications:
    email:
        on_success: never
        on_failure: always

cache:
    directories:
        - $HOME/.cabal/packages
        - $HOME/.cabal/store

before_cache:
    - rm -fv $HOME/.cabal/packages/hackage.haskell.org/build-reports.log
    # remove files that are regenerated by `cabal update`
    - rm -fv $HOME/.cabal/packages/hackage.haskell.org/00-index.*
    - rm -fv $HOME/.cabal/packages/hackage.haskell.org/*.json
    - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.cache
    - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar
    - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar.idx

    - rm -rfv $HOME/.cabal/packages/head.hackage
